{"version":3,"names":["scCheckboxCss","id","ScCheckbox","this","inputId","labelId","firstUpdated","input","indeterminate","async","click","options","focus","blur","invalid","checkValidity","reportValidity","setCustomValidity","message","handleClick","checked","handleBlur","hasFocus","scBlur","emit","handleFocus","scFocus","handleLabelMouseDown","handleStateChange","scChange","componentDidLoad","formController","FormSubmitController","el","value","control","undefined","addFormData","disconnectedCallback","_a","removeFormData","render","Tag","edit","h","part","class","checkbox","required","disabled","isRtl","htmlFor","onMouseDown","viewBox","stroke","fill","transform","d","ref","type","name","role","onClick","onBlur","onFocus"],"sources":["./src/components/ui/checkbox/sc-checkbox.scss?tag=sc-checkbox&encapsulation=shadow","./src/components/ui/checkbox/sc-checkbox.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.checkbox {\n  display: flex;\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-medium);\n  font-weight: var(--sc-input-font-weight);\n  color: var(--sc-input-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.checkbox__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--sc-checkbox-size);\n  height: var(--sc-checkbox-size);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n  border-radius: 2px;\n  background-color: var(--sc-input-background-color);\n  color: var(--sc-color-white);\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) border-color, var(--sc-input-transition, var(--sc-transition-medium)) opacity,\n    var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color,\n    var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n\n  .checkbox__icon {\n    display: inline-flex;\n    width: var(--sc-checkbox-size);\n    height: var(--sc-checkbox-size);\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n\n// Hover\n.checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {\n  border-color: var(--sc-input-border-color-hover);\n  background-color: var(--sc-input-background-color-hover);\n}\n\n// Focus\n.checkbox.checkbox--focused:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control {\n  border-color: var(--sc-input-border-color-focus);\n  background-color: var(--sc-input-background-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Checked/indeterminate\n.checkbox--checked .checkbox__control,\n.checkbox--indeterminate .checkbox__control {\n  border-color: var(--sc-color-primary-500);\n  background-color: var(--sc-color-primary-500);\n}\n\n// Checked/indeterminate + hover\n.checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,\n.checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {\n  opacity: 0.8;\n}\n\n// Checked/indeterminate + focus\n.checkbox.checkbox--checked:not(.checkbox--disabled).checkbox--focused .checkbox__control,\n.checkbox.checkbox--indeterminate:not(.checkbox--disabled).checkbox--focused .checkbox__control {\n  border-color: var(--sc-color-white);\n  background-color: var(--sc-color-primary-500);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Disabled\n.checkbox--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.checkbox__label {\n  line-height: var(--sc-checkbox-size);\n  margin-top: var(--sc-input-border-width);\n  margin-left: 0.5em;\n  flex: 1;\n  // user-select: none;\n}\n\n.checkbox--is-required .checkbox__label:after {\n  content: ' *';\n  color: var(--sc-color-danger-500);\n}\n\n::slotted(*) {\n  display: inline-block;\n}\n\n.checkbox--is-rtl {\n  .checkbox__label {\n    margin-left: 0;\n    margin-right: 0.5em;\n  }\n}\n","import { Component, Prop, State, h, Event, EventEmitter, Method, Watch, Element } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\nimport { isRtl } from '../../../functions/page-align';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part indeterminate-icon - Indeterminate icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-checkbox',\n  styleUrl: 'sc-checkbox.scss',\n  shadow: true,\n})\nexport class ScCheckbox {\n  @Element() el: HTMLScCheckboxElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n\n  @State() private hasFocus: boolean = false;\n\n  /** The checkbox's name attribute. */\n  @Prop() name: string;\n\n  /** The checkbox's value attribute. */\n  @Prop() value: string;\n\n  /** Disables the checkbox. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes this edit and not editable. */\n  @Prop({ reflect: true }) edit: boolean = false;\n\n  /** Makes the checkbox a required field. */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Draws the checkbox in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Draws the checkbox in an indeterminate state. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  firstUpdated() {\n    this.input.indeterminate = this.indeterminate;\n  }\n\n  /** Simulates a click on the checkbox. */\n  @Method()\n  async triggerClick() {\n    return this.input.click();\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async triggerBlur() {\n    return this.input.blur();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleLabelMouseDown() {\n    // Prevent clicks on the label from briefly blurring the input\n    // event.preventDefault();\n    this.input.focus();\n  }\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleStateChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.scChange.emit();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'checkbox': true,\n          'checkbox--is-required': this.required,\n          'checkbox--checked': this.checked,\n          'checkbox--disabled': this.disabled,\n          'checkbox--focused': this.hasFocus,\n          'checkbox--indeterminate': this.indeterminate,\n          'checkbox--is-rtl':isRtl()\n        }}\n        htmlFor={this.inputId}\n        onMouseDown={() => this.handleLabelMouseDown()}\n      >\n        <span part=\"control\" class=\"checkbox__control\">\n          {this.checked ? (\n            <span part=\"checked-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(3.428571, 3.428571)\">\n                      <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                      <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          {!this.checked && this.indeterminate ? (\n            <span part=\"indeterminate-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(2.285714, 6.857143)\">\n                      <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"checkbox\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            role=\"checkbox\"\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"checkbox__label\">\n          <slot></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n"],"mappings":"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"}