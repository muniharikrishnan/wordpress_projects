{"version":3,"names":["scAddressCss","wp","i18n","__","name","_b","this","names","disabled","required","requireName","placeholders","h","exportparts","part","value","_c","address","country","onScChange","e","_d","search","unselect","squared","showName","_e","line_1","updateAddress","target","onScInput","handleAddressInput","autocomplete","placeholder","_f","showLine2","_g","line_2","_h","class","showCity","city","_j","_k","_l","regions","length","showPostal","postal_code","_m","_o","_p","maxlength","_q","_r","_s","state","_t","_u","_a","detail","choices","loading","isArray","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","fieldNormWeight","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","parseIndex","data","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","static","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","super","type","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","ExtendedSearch","_","numMatches","qLen","pLen","registeredSearchers","register","args","createSearcher","searcherClass","condition","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","config","scSelectCss","itemIndex","arrowFlag","searchPlaceholder","handleQuery","clearable","searchTerm","ref","el","searchInput","onKeyDown","stopPropagation","style","slot","maxHeight","overflow","onScroll","handleMenuScroll","filteredChoices","choice"],"sources":["./src/components/ui/address/sc-address.scss?tag=sc-address&encapsulation=shadow","./src/components/ui/address/sc-address.tsx","../../node_modules/fuse.js/dist/fuse.esm.js","./src/components/ui/select/sc-select.scss?tag=sc-select&encapsulation=shadow","./src/components/ui/select/sc-select.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.sc-address {\n  display: block;\n  position: relative;\n\n  [hidden] {\n    display: none;\n  }\n\n  &--loading {\n    min-height: 230px;\n  }\n\n  sc-skeleton {\n    display: block;\n    margin-bottom: 1em;\n  }\n\n  &__control {\n    display: block;\n\n    > * {\n      margin-bottom: var(--sc-address-column-spacing, -1px);\n    }\n  }\n\n  &__columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > * {\n      flex: 1;\n      width: 50%;\n      margin-right: var(--sc-address-column-spacing, -1px);\n\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { hasState, hasCity, hasPostal, countryChoices } from '../../../functions/address';\nimport { reportChildrenValidity } from '../../../functions/form-data';\nimport { Address } from '../../../types';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-address',\n  styleUrl: 'sc-address.scss',\n  shadow: true,\n})\nexport class ScAddress {\n  @Element() el: HTMLScAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    name: 'shipping_name',\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  @Prop() placeholders: Partial<Address> = {};\n\n  /** Is this loading?  */\n  @Prop() loading: boolean = false;\n\n  /** Is this disabled? */\n  @Prop() disabled: boolean;\n\n  /** The label for the field. */\n  @Prop() label: string;\n\n  /** Should we show name field? */\n  @Prop({ reflect: true, mutable: true }) showName: boolean;\n\n  /** Should we show name field? */\n  @Prop() showLine2: boolean;\n\n  /** Is this required? */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Is the name required */\n  @Prop({ reflect: true }) requireName: boolean = false;\n\n  /** Should we show the city field? */\n  @State() showCity: boolean = true;\n\n  /** Should we show the postal field? */\n  @State() showPostal: boolean = true;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address change event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address.country) return;\n    this.setRegions();\n    this.showPostal = hasPostal(this.address.country);\n    this.showCity = hasCity(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  @Watch('requireName')\n  handleNameChange() {\n    if (this.requireName) {\n      this.showName = true;\n    }\n  }\n\n  decodeHtmlEntities(html: string) {\n    return new DOMParser().parseFromString(html, 'text/html')?.body.textContent || html;\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address.country)) {\n      import('./countries.json').then(module => {\n        const countryRegions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n\n        this.regions = (countryRegions || []).map(region => ({\n          ...region,\n          label: this.decodeHtmlEntities(region.label),\n        }));\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address.country)?.value || null;\n    this.updateAddress({ country });\n    this.handleNameChange();\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control label={this.label} exportparts=\"label, help-text, form-control\" class=\"sc-address__control\" required={this.required}>\n          {this.showName && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.name}\n              onScChange={(e: any) => this.updateAddress({ name: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.name || __('Name or Company Name', 'surecart')}\n              name={this.names?.name}\n              squared-bottom\n              disabled={this.disabled}\n              required={this.requireName}\n              aria-label={this.placeholders.name || __('Name or Company Name', 'surecart')}\n            />\n          )}\n\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            part=\"name__input\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders.country || __('Country', 'surecart')}\n            name={this.names?.country}\n            search\n            unselect={false}\n            squared-bottom\n            squared={this.showName}\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.country || __('Country', 'surecart')}\n          />\n\n          <sc-input\n            exportparts=\"base:input__base, input, form-control, label, help-text\"\n            value={this?.address?.line_1}\n            onScChange={(e: any) => this.updateAddress({ line_1: e.target.value || null })}\n            onScInput={(e: any) => this.handleAddressInput({ line_1: e.target.value || null })}\n            autocomplete=\"street-address\"\n            placeholder={this.placeholders.line_1 || __('Address', 'surecart')}\n            name={this.names?.line_1}\n            squared\n            disabled={this.disabled}\n            required={this.required}\n            aria-label={this.placeholders.line_1 || __('Address', 'surecart')}\n          />\n\n          {this.showLine2 && (\n            <sc-input\n              exportparts=\"base:input__base, input, form-control, label, help-text\"\n              value={this?.address?.line_2}\n              onScChange={(e: any) => this.updateAddress({ line_2: e.target.value || null })}\n              onScInput={(e: any) => this.handleAddressInput({ line_2: e.target.value || null })}\n              autocomplete=\"street-address\"\n              placeholder={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n              name={this.names?.line_2}\n              squared\n              disabled={this.disabled}\n              aria-label={this.placeholders.line_2 || __('Address Line 2', 'surecart')}\n            />\n          )}\n\n          <div class=\"sc-address__columns\" part=\"columns\">\n            {this.showCity && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.city || __('City', 'surecart')}\n                name={this.names?.city}\n                value={this?.address?.city}\n                onScChange={(e: any) => this.updateAddress({ city: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ city: e.target.value || null })}\n                required={this.required}\n                squared={!!this?.regions?.length}\n                // style={{ marginRight: this.showPostal ? '-1px' : '0' }}\n                squared-top\n                disabled={this.disabled}\n                squared-right={this.showPostal}\n                aria-label={this.placeholders.city || __('City', 'surecart')}\n              />\n            )}\n\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names?.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ postal_code: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared={!!this?.regions?.length}\n                squared-top\n                disabled={this.disabled}\n                maxlength={this.address?.country === 'US' ? 5 : null}\n                squared-left={this.showCity}\n                aria-label={this.placeholders.postal_code || __('Postal Code/Zip', 'surecart')}\n              />\n            )}\n          </div>\n\n          {!!this?.regions?.length && !!this?.address?.country && (\n            <sc-select\n              exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n              placeholder={this.placeholders.state || __('State/Province/Region', 'surecart')}\n              name={this.names?.state}\n              autocomplete={'address-level1'}\n              value={this?.address?.state}\n              onScChange={(e: any) => this.updateAddress({ state: e.target.value || e.detail?.value || null })}\n              choices={this.regions}\n              required={this.required}\n              disabled={this.disabled}\n              search\n              squared-top\n              aria-label={this.placeholders.state || __('State/Province/Region', 'surecart')}\n            />\n          )}\n        </sc-form-control>\n\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n","/**\n * Fuse.js v6.5.3 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.5.3';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n",":host {\n  display: block;\n  --focus-ring: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n.search {\n  margin: var(--sc-spacing-x-small) var(--sc-spacing-x-small) 0 var(--sc-spacing-x-small);\n}\n\n.loading {\n  text-align: center;\n  margin: var(--sc-spacing-small);\n}\n\n.select {\n  font-family: var(--sc-input-font-family);\n  font-weight: var(--sc-font-weight-normal);\n}\n\nsc-dropdown {\n  display: block;\n}\n\n.trigger {\n  overflow: hidden;\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  border-style: solid;\n  border-width: var(--sc-input-border-width);\n  background-color: var(--sc-select-background-color, var(--sc-color-white));\n  border-color: var(--sc-select-border-color, var(--sc-color-gray-300));\n  color: var(--sc-input-color);\n  text-decoration: none;\n  user-select: none;\n  white-space: nowrap;\n  vertical-align: middle;\n  padding: 0;\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color,\n    var(--sc-input-transition, var(--sc-transition-medium)) border, var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n  cursor: inherit;\n  box-shadow: var(--sc-shadow-small);\n  font-size: var(--sc-button-font-size-medium);\n  min-height: var(--sc-input-height-medium);\n  line-height: calc(var(--sc-input-height-medium) - var(--sc-input-border-width) * 2);\n  border-radius: var(--sc-input-border-radius-medium);\n  padding: 0 var(--sc-spacing-small);\n  svg {\n    display: block;\n    width: 1em;\n    height: 1em;\n  }\n}\n\n.select {\n  &.select--focused:not(.select--disabled) .trigger {\n    background-color: var(--sc-input-background-color-focus);\n    border-color: var(--sc-input-border-color-focus);\n    box-shadow: var(--focus-ring);\n    z-index: 2;\n  }\n\n  &--disabled {\n    cursor: not-allowed;\n    sc-dropdown {\n      opacity: 0.65;\n    }\n  }\n}\n\n.select__value {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.select__empty {\n  text-align: center;\n  margin: var(--sc-spacing-small);\n  color: var(--sc-color-gray-400);\n}\n\n.select--placeholder .trigger {\n  color: var(--sc-input-placeholder-color);\n}\n\n.select {\n  &__hidden-input {\n    position: absolute;\n    opacity: 0;\n    padding: 0px;\n    margin: 0px;\n    pointer-events: none;\n    width: 0;\n  }\n  &__suffix-description,\n  &__description {\n    font-size: var(--sc-input-help-text-font-size-medium);\n    opacity: 0.65;\n  }\n}\n\n.select__caret {\n  transition: transform 0.25s ease;\n  line-height: 0;\n}\n.select--is-open .select__caret {\n  transform: rotate(180deg);\n}\n\n.select {\n  &--squared .trigger {\n    border-radius: 0;\n  }\n  &--squared-top .trigger {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n  }\n  &--squared-bottom .trigger {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  &--squared-left .trigger {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  &--squared-right .trigger {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n}\n\n.choice__icon--image {\n  width: 18px;\n  height: 18px;\n  object-fit: contain;\n}\n\nsc-menu-item.is-unavailable {\n  --sc-menu-item-color: var(--sc-color-gray-500);\n}\n","import { Component, Prop, h, State, Watch, Event, EventEmitter, Method, Element, Listen } from '@stencil/core';\nimport { ChoiceItem } from '../../../types';\nimport Fuse from 'fuse.js';\nimport { FormSubmitController } from '../../../functions/form-data';\nimport { __ } from '@wordpress/i18n';\nimport { isValidURL } from '../../../functions/util';\n\nlet id = 0;\nlet itemIndex = 0;\nlet arrowFlag = '';\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The trigger for the dropdown.\n * @part panel - Them panel for the dropdown.\n * @part caret - The caret.\n * @part search___base - The search base wrapper.\n * @part search__input - The search input element.\n * @part search__form-control - The search form control wrapper.\n * @part menu__base - The menu base.\n * @part spinner__base - The spinner base.\n * @part empty - The empty message.\n */\n@Component({\n  tag: 'sc-select',\n  styleUrl: 'sc-select.scss',\n  shadow: true,\n})\nexport class ScSelectDropdown {\n  /** Element */\n  @Element() el: HTMLScSelectElement;\n\n  private formController: any;\n\n  private searchInput: HTMLScInputElement;\n  private input: HTMLInputElement;\n\n  private inputId: string = `select-${++id}`;\n  private helpId = `select-help-text-${id}`;\n  private labelId = `select-label-${id}`;\n\n  /** The input's autocomplete attribute. */\n  @Prop() autocomplete: string;\n\n  /** Placeholder for no value */\n  @Prop() placeholder: string = '';\n\n  /** Placeholder for search */\n  @Prop() searchPlaceholder: string = '';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value = '';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) choices: Array<ChoiceItem> = [];\n\n  /** Can we unselect items. */\n  @Prop() unselect: boolean = true;\n\n  /* Is it required */\n  @Prop({ reflect: true }) required: boolean;\n\n  /* Is it loading */\n  @Prop() loading: boolean;\n\n  /** Is search enabled? */\n  @Prop() search: boolean;\n\n  @Prop() closeOnSelect: boolean = true;\n\n  /** The input's name attribute. */\n  @Prop({ reflect: true }) name: string;\n\n  /** Some help text for the input. */\n  @Prop() help: string;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  @Prop() position: 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' = 'bottom-right';\n\n  /** The placement of the dropdown. */\n  @Prop({ reflect: true }) placement:\n    | 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end' = 'bottom-start';\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** Is this open */\n  @Prop({ mutable: true }) open: boolean;\n  @Prop() disabled: boolean;\n  @Prop() showParentLabel: boolean = true;\n  @Prop() hoist: boolean = false;\n\n  @Prop() squared: boolean;\n  @Prop() squaredBottom: boolean;\n  @Prop() squaredTop: boolean;\n  @Prop() squaredLeft: boolean;\n  @Prop() squaredRight: boolean;\n\n  @State() private hasFocus: boolean = false;\n\n  /** Search term */\n  @State() searchTerm: string = '';\n\n  /** Search term */\n  @State() filteredChoices: Array<ChoiceItem> = [];\n\n  /** Emitted whent the components search query changes */\n  @Event() scSearch: EventEmitter<string>;\n\n  /** Emitted whent the components search query changes */\n  @Event() scOpen: EventEmitter<string>;\n\n  /** Emitted whent the components search query changes */\n  @Event() scClose: EventEmitter<string>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true })\n  scChange: EventEmitter<ChoiceItem>;\n\n  /** Emitted when the list scrolls to the end. */\n  @Event() scScrollEnd: EventEmitter<void>;\n\n  /** Trigger focus on show */\n  handleShow() {\n    this.open = true;\n    setTimeout(() => {\n      this.searchInput && this.searchInput.triggerFocus();\n    }, 50);\n  }\n\n  handleHide() {\n    this.open = false;\n    itemIndex = 0;\n    this.scClose.emit();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.el.focus();\n    this.scFocus.emit();\n  }\n\n  /** Get the display value of the item. */\n  displayValue() {\n    if (!this.value) return false;\n    let chosen = this.choices.find(choice => choice.value == this.value);\n    let append = '';\n    if (!chosen) {\n      if (this.showParentLabel) {\n        append = this.choices.find(choice => choice?.choices?.some?.(subChoice => subChoice.value === this.value))?.label;\n      }\n      const subchoices = (this.choices || []).map(choice => choice.choices).flat();\n      chosen = subchoices.find(choice => choice?.value == this.value);\n    }\n    if (chosen) {\n      return `${append ? append + ' — ' : ''}${chosen?.label}`;\n    }\n    return false;\n  }\n\n  isChecked({ value, checked = false }) {\n    if (checked) {\n      return true;\n    }\n    return !!value && this.value === value;\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  @Method()\n  async setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  handleQuery(e) {\n    this.searchTerm = e.target.value;\n    this.scSearch.emit(this.searchTerm);\n  }\n\n  handleSelect(choice) {\n    const { value } = choice;\n\n    if (this.value === value && this.unselect) {\n      this.value = '';\n    } else {\n      this.value = value;\n    }\n\n    if (this.closeOnSelect) {\n      this.searchTerm = '';\n    }\n\n    this.scChange.emit(choice);\n  }\n\n  @Watch('searchTerm')\n  @Watch('choices')\n  handleSearchChange() {\n    const fuse = new Fuse(this.choices, {\n      keys: ['value', 'label'],\n    });\n\n    if (this.searchTerm) {\n      const results = fuse.search(this.searchTerm) as any;\n      this.filteredChoices = results.map(result => result.item);\n    } else {\n      this.filteredChoices = this.choices;\n    }\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    if (this.input) {\n      this.invalid = !this.input.checkValidity();\n    }\n  }\n\n  @Watch('open')\n  handleOpenChange() {\n    if (this.open) {\n      this.scOpen.emit();\n      this.searchInput && this.searchInput.triggerFocus();\n    } else {\n      this.scClose.emit();\n    }\n  }\n\n  handleMenuScroll(e) {\n    const scrollTop = e.target.scrollTop;\n    const scrollHeight = e.target.scrollHeight;\n    const offsetHeight = e.target.offsetHeight;\n    const contentHeight = scrollHeight - offsetHeight;\n    if (contentHeight - scrollTop < 5) this.scScrollEnd.emit();\n  }\n\n  componentWillLoad() {\n    this.handleSearchChange();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el).addFormData();\n    if (this.open) {\n      this.searchInput && this.searchInput.triggerFocus();\n    }\n  }\n\n  getItems() {\n    return [...this.el.shadowRoot.querySelectorAll<HTMLScMenuItemElement>('sc-menu-item')];\n  }\n\n  @Listen('keydown')\n  handleKeyDown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n    const items = this.getItems();\n\n    // Ignore key presses on tags\n    if (target.tagName.toLowerCase() === 'sc-tag') {\n      return;\n    }\n\n    // Tabbing out of the control closes it\n    if (event.key === 'Tab') {\n      if (this.open) {\n        this.handleHide();\n      }\n\n      return;\n    }\n\n    // Up/down opens the menu\n    if (['ArrowDown', 'ArrowUp'].includes(event.key)) {\n      event.preventDefault();\n\n      // Show the menu if it's not already open\n      if (!this.open) {\n        this.handleShow();\n      }\n\n      // Focus on a menu item\n      if (event.key === 'ArrowDown') {\n        if (arrowFlag == 'up') {\n          itemIndex = itemIndex + 2;\n        }\n        if (itemIndex > items.length - 1) {\n          itemIndex = 0;\n        }\n\n        items[itemIndex].setFocus();\n\n        arrowFlag = 'down';\n        itemIndex++;\n\n        return;\n      }\n\n      if (event.key === 'ArrowUp') {\n        if (arrowFlag == 'down') {\n          itemIndex = itemIndex - 2;\n        }\n        if (itemIndex < 0) {\n          itemIndex = items.length - 1;\n        }\n\n        items[itemIndex].setFocus();\n\n        arrowFlag = 'up';\n        itemIndex--;\n\n        return;\n      }\n    }\n\n    // Close select dropdown on Esc/Escape key\n    if (event.key === 'Escape') {\n      if (this.open) {\n        this.input.focus();\n        this.handleHide();\n      }\n\n      return;\n    }\n\n    // Open select dropdown with Enter\n    if (event.key === 'Enter') {\n      if (this.open) {\n        items[itemIndex - 1]?.click?.();\n        this.handleHide();\n        this.input.focus();\n      } else {\n        this.handleShow();\n      }\n    }\n\n    // don't open the menu when a CTRL/Command key is pressed\n    if (event.ctrlKey || event.metaKey) {\n      return;\n    }\n\n    // All other \"printable\" keys open the menu and initiate type to select\n    // TODO: this is closing out the dropdown during typing events.\n    // FIX: It must have focus as well. And it fix the random closing issue.\n    if (!this.open && this.hasFocus && event.key.length === 1) {\n      this.handleShow();\n    }\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  renderIcon(icon) {\n    if (isValidURL(icon)) {\n      return <img src={icon} alt=\"icon\" slot=\"prefix\" class=\"choice__icon--image\" />;\n    }\n    return <sc-icon name={icon} slot=\"prefix\" class=\"choice__icon\" />;\n  }\n\n  renderItem(choice: ChoiceItem, index: number) {\n    if (choice?.choices?.length) {\n      return <sc-menu-label key={index}>{choice.label}</sc-menu-label>;\n    }\n\n    return (\n      <sc-menu-item\n        class={{ 'is-unavailable': choice?.unavailable }}\n        key={index}\n        checked={this.isChecked(choice)}\n        value={choice?.value}\n        onClick={() => !choice.disabled && this.handleSelect(choice)}\n        onKeyDown={event => {\n          if ((event.key === 'Enter' || event.key === ' ') && !choice.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            this.handleSelect(choice);\n          }\n        }}\n        disabled={choice.disabled}\n        aria-label={choice.label}\n        aria-selected={this.isChecked(choice) ? 'true' : 'false'}\n        role=\"option\"\n      >\n        {choice.label}\n        {!!choice?.description && <div class=\"select__description\">{choice?.description}</div>}\n        <div slot=\"suffix\">\n          {choice?.suffix} {!!choice?.suffixDescription && <div class=\"select__suffix-description\">{choice?.suffixDescription}</div>}\n        </div>\n        {!!choice?.icon && this.renderIcon(choice.icon)}\n      </sc-menu-item>\n    );\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'select': true,\n          'select--placeholder': !this.value,\n          'select--focused': this.hasFocus,\n          'select--is-open': !!this.open,\n          'select--disabled': this.disabled,\n          'select--has-choices': !!this?.choices?.length,\n          'select--squared': this.squared,\n          'select--squared-bottom': this.squaredBottom,\n          'select--squared-top': this.squaredTop,\n          'select--squared-left': this.squaredLeft,\n          'select--squared-right': this.squaredRight,\n        }}\n      >\n        <sc-form-control\n          exportparts=\"label, help-text, form-control\"\n          size={this.size}\n          required={this.required}\n          label={this.label}\n          help={this.help}\n          inputId={this.inputId}\n          helpId={this.helpId}\n          labelId={this.labelId}\n          name={this.name}\n        >\n          <input\n            class=\"select__hidden-input\"\n            name={this.name}\n            ref={el => (this.input = el as HTMLInputElement)}\n            value={this.value}\n            required={this.required}\n            disabled={this.disabled}\n            aria-hidden=\"true\"\n            aria-label={this.displayValue() || this.label || this.placeholder}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          ></input>\n\n          <sc-dropdown\n            exportparts=\"trigger, panel\"\n            disabled={this.disabled}\n            open={this.open}\n            closeOnSelect={this.closeOnSelect}\n            position={this.position}\n            placement={this.placement}\n            hoist={this.hoist}\n            style={{ '--panel-width': '100%' }}\n            onScShow={() => this.handleShow()}\n            onScHide={() => this.handleHide()}\n            role=\"select\"\n            aria-open={this.open ? 'true' : 'false'}\n          >\n            <slot name=\"trigger\" slot=\"trigger\">\n              <div class=\"trigger\" role=\"button\" tabIndex={-1} onFocus={() => this.handleFocus()} onBlur={() => this.handleBlur()}>\n                <div class=\"select__value\">\n                  <slot>{this.displayValue() || this.placeholder || __('Select...', 'surecart')}</slot>\n                </div>\n                <sc-icon exportparts=\"base:caret\" class=\"select__caret\" name=\"chevron-down\" />\n              </div>\n            </slot>\n\n            {this.search && (\n              <sc-input\n                exportparts=\"base:search__base, input:search__input, form-control:search__form-control\"\n                placeholder={this.searchPlaceholder || __('Search...', 'surecart')}\n                onScInput={e => this.handleQuery(e)}\n                class=\"search\"\n                clearable\n                part=\"search\"\n                value={this.searchTerm}\n                ref={el => (this.searchInput = el as HTMLScInputElement)}\n                aria-label={__('Type to search', 'surecart')}\n                onKeyDown={e => e.stopPropagation()}\n              >\n                {this.loading && <sc-spinner exportparts=\"base:spinner__base\" style={{ '--spinner-size': '0.5em' }} slot=\"suffix\"></sc-spinner>}\n              </sc-input>\n            )}\n\n            <sc-menu style={{ maxHeight: '210px', overflow: 'auto' }} exportparts=\"base:menu__base\" onScroll={e => this.handleMenuScroll(e)} aria-multiselectable=\"false\">\n              <slot name=\"prefix\"></slot>\n              {(this.filteredChoices || []).map((choice, index) => {\n                return [this.renderItem(choice, index), (choice.choices || []).map(choice => this.renderItem(choice, index))];\n              })}\n              {this.loading && (\n                <div class=\"loading\">\n                  <sc-spinner exportparts=\"base:spinner__base\"></sc-spinner>\n                </div>\n              )}\n              {!this.loading && !this.filteredChoices.length && (\n                <div class=\"select__empty\" part=\"empty\">\n                  {__('Nothing Found', 'surecart')}\n                </div>\n              )}\n              <slot name=\"suffix\"></slot>\n            </sc-menu>\n          </sc-dropdown>\n        </sc-form-control>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"}